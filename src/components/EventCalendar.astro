---
import { google } from "googleapis";
import Link from "@/components/Link.astro";

type CalendarEvent = {
  id: string;
  title: string;
  start: string; // ISO 8601 string
  end: string; // ISO 8601 string
  url?: string;
  location?: string;
  description?: string;
};

interface Props {
  enableLocation?: boolean;
  enableLinks?: boolean;
}

const { enableLocation = true, enableLinks = true } = Astro.props;

// Environment variables
const apiKey = import.meta.env.GOOGLE_CAL_API_KEY;
const calendarId = import.meta.env.GOOGLE_CAL_ID;

// Cache setup (module-level variables persist across requests)
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes
let cachedEvents: CalendarEvent[] = [];
let lastUpdated = new Date(1970, 0, 1); // Force initial load

async function loadEvents(): Promise<CalendarEvent[]> {
  const now = new Date();
  const cacheAge = now.getTime() - lastUpdated.getTime();

  if (cacheAge < CACHE_DURATION && cachedEvents.length > 0) {
    return cachedEvents;
  }

  try {
    const calendar = google.calendar({ version: "v3", auth: apiKey });
    const timeMin = new Date();
    const timeMax = new Date();
    timeMax.setDate(timeMax.getDate() + 14);

    const response = await calendar.events.list({
      calendarId: calendarId,
      timeMin: timeMin.toISOString(),
      timeMax: timeMax.toISOString(),
      singleEvents: true,
      maxResults: 10,
      orderBy: "startTime",
      fields: "items(start,end,summary,description,location,htmlLink,id)",
    });

    if (response.status !== 200 || !response.data.items) {
      return [];
    }

    const events: CalendarEvent[] = response.data.items
      .filter((event) => event.start?.dateTime && event.end?.dateTime && event.id)
      .map((event) => ({
        id: event.id!,
        title: event.summary || "Untitled Event",
        start: event.start!.dateTime!,
        end: event.end!.dateTime!,
        url: event.htmlLink || undefined,
        location: event.location || undefined,
        description: event.description || undefined,
      }));

    cachedEvents = events;
    lastUpdated = new Date();
    return events;
  } catch (error) {
    console.error("Error fetching calendar events:", error);
    return cachedEvents;
  }
}

const events = await loadEvents();

function formatTime(date: Date): string {
  const hours = date.getHours();
  const minutes = date.getMinutes().toString().padStart(2, "0");
  const amPm = hours >= 12 ? "pm" : "am";
  const hour = hours % 12 || 12;
  return `${hour}:${minutes}${amPm}`;
}

function formatDate(date: Date): string {
  return date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
}

// Group events by day
const eventsByDay: { date: string; events: (CalendarEvent & { startDate: Date; endDate: Date; isNow: boolean })[] }[] = [];
const now = new Date();

events.forEach((event) => {
  const startDate = new Date(event.start);
  const endDate = new Date(event.end);
  const dateString = formatDate(startDate);
  const isNow = startDate.getTime() < now.getTime() && endDate.getTime() > now.getTime();

  let dayGroup = eventsByDay.find((d) => d.date === dateString);
  if (!dayGroup) {
    dayGroup = { date: dateString, events: [] };
    eventsByDay.push(dayGroup);
  }

  dayGroup.events.push({ ...event, startDate, endDate, isNow });
});
---

{events.length === 0 ? (
  <div class="h-full w-full p-4 text-center">
    <p class="text-lg">
      Join our discord to find out more about upcoming events.
    </p>
  </div>
) : (
  <div class="h-full w-full overflow-y-scroll rounded-lg border border-opacity-25 text-center text-sm shadow-lg md:h-3/5 md:text-base">
    {eventsByDay.map((day) => (
      <>
        <div class="w-fill border-b border-opacity-25 bg-opacity-10 p-2 font-mono">
          <h2 class="pl-2 text-start font-bold">{day.date}</h2>
        </div>

        {day.events.map((event, index) => {
          const isLast = index === day.events.length - 1 && day === eventsByDay[eventsByDay.length - 1];
          const border = isLast ? "" : "border-b border-wai-gray border-opacity-25";
          const currentEventStyle = event.isNow ? "bg-lavender bg-opacity-50" : "";
          const timeString = `${formatTime(event.startDate)} - ${formatTime(event.endDate)}`;

          return enableLinks && event.url ? (
            <Link
              href={event.url}
              external
              class="group block"
              aria-label={event.title}
            >
              <div class={`group grid grid-cols-9 pb-2 pt-2 hover:bg-purple hover:bg-opacity-50 ${border} ${currentEventStyle}`}>
                <div class="col-span-4 pl-4 text-start">
                  <p>{timeString}</p>
                  {enableLocation && event.location && <p> @ {event.location}</p>}
                </div>

                <div class="col-span-1 inline-block h-3 w-3 place-self-center rounded-full bg-purple bg-opacity-95"></div>

                <div class="col-span-4 my-auto pr-4 group-hover:underline">
                  <p class="text-start">{event.title}</p>
                </div>
              </div>
            </a>
          ) : (
            <div class={`grid grid-cols-9 pb-2 pt-2 ${border} ${currentEventStyle}`}>
              <div class="col-span-4 pl-4 text-start">
                <p>{timeString}</p>
                {enableLocation && event.location && <p> @ {event.location}</p>}
              </div>

              <div class="col-span-1 inline-block h-3 w-3 place-self-center rounded-full bg-purple bg-opacity-95"></div>

              <div class="col-span-4 my-auto pr-4">
                <p class="text-start">{event.title}</p>
              </div>
            </div>
          );
        })}
      </>
    ))}
  </div>
)}
